var EventDispatcher;(EventDispatcher=function(){}).prototype={subscribe:function(t,e,n,i){function r(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var e=16*Math.random()|0,n="x"===t?e:3&e|8;return n.toString(16)})}var s,x,o=this;(s=this.listeners)||(s=this.listeners={}),(x=s[t])||(x=s[t]=[]),n=n?n:window;var u=r();return x.push({id:u,method:e,scope:n,context:i?i:n}),function(){o.unSubscribe(t,u)}},hasSubscribers:function(t){return this.listeners&&this.listeners[t]&&this.listeners[t].length>0},unSubscribe:function(t,e){for(var n=this.listeners[t].length,i=null;!i&&n--;)this.listeners[t][n].id===e&&(i=this.listeners[t][n]);i&&this.listeners[t].splice(n,1)},trigger:function(t,e,n){var i,r,s,x=this.listeners;if(e=e instanceof Array?e:[e],x){var o=x[t];if(o){for(i=0,r=o.length;r>i;i++)if(s=o[i],("undefined"==typeof n||n===s.context)&&s&&s.method.apply(s.scope,e)===!1)return!1;return!0}}}};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV2ZW50ZGlzcGF0Y2hlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxHQUFBLGtCQUNBLGdCQUFBLGNBQ0EsV0FDQSxVQUFBLFNBQUEsRUFBQSxFQUFBLEVBQUEsR0FHQSxRQUFBLEtBQ0EsTUFBQSx1Q0FBQSxRQUFBLFFBQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxHQUFBLEtBQUEsU0FBQSxFQUFBLEVBQUEsTUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQ0EsT0FBQSxHQUFBLFNBQUEsTUFMQSxHQUFBLEdBQUEsRUFTQSxFQUFBLE1BQ0EsRUFBQSxLQUFBLGFBQ0EsRUFBQSxLQUFBLGVBRUEsRUFBQSxFQUFBLE1BQ0EsRUFBQSxFQUFBLE9BRUEsRUFBQSxFQUFBLEVBQUEsTUFDQSxJQUFBLEdBQUEsR0FPQSxPQU5BLEdBQUEsTUFDQSxHQUFBLEVBQ0EsT0FBQSxFQUNBLE1BQUEsRUFDQSxRQUFBLEVBQUEsRUFBQSxJQUVBLFdBQ0EsRUFBQSxZQUFBLEVBQUEsS0FHQSxlQUFBLFNBQUEsR0FDQSxNQUFBLE1BQUEsV0FBQSxLQUFBLFVBQUEsSUFBQSxLQUFBLFVBQUEsR0FBQSxPQUFBLEdBRUEsWUFBQSxTQUFBLEVBQUEsR0FHQSxJQUZBLEdBQUEsR0FBQSxLQUFBLFVBQUEsR0FBQSxPQUNBLEVBQUEsTUFDQSxHQUFBLEtBQ0EsS0FBQSxVQUFBLEdBQUEsR0FBQSxLQUFBLElBQ0EsRUFBQSxLQUFBLFVBQUEsR0FBQSxHQUdBLElBR0EsS0FBQSxVQUFBLEdBQUEsT0FBQSxFQUFBLElBRUEsUUFBQSxTQUFBLEVBQUEsRUFBQSxHQUNBLEdBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxLQUFBLFNBRUEsSUFEQSxFQUFBLFlBQUEsT0FBQSxHQUFBLEdBQ0EsRUFBQSxDQUlBLEdBQUEsR0FBQSxFQUFBLEVBQ0EsSUFBQSxFQUFBLENBR0EsSUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLE9BQUEsRUFBQSxFQUFBLElBRUEsR0FEQSxFQUFBLEVBQUEsSUFDQSxtQkFBQSxJQUFBLElBQUEsRUFBQSxVQUFBLEdBR0EsRUFBQSxPQUFBLE1BQUEsRUFBQSxNQUFBLE1BQUEsRUFDQSxPQUFBLENBR0EsUUFBQSIsImZpbGUiOiJldmVudERpc3BhdGNoZXIubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIEV2ZW50RGlzcGF0Y2hlcjtcclxuKEV2ZW50RGlzcGF0Y2hlciA9IGZ1bmN0aW9uICgpIHtcclxufSkucHJvdG90eXBlID0ge1xyXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiAodHlwZSwgbWV0aG9kLCBzY29wZSwgY29udGV4dCkge1xyXG4gICAgICAgIHZhciBsaXN0ZW5lcnMsIGhhbmRsZXJzO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZUd1aWQoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgciA9IE1hdGgucmFuZG9tKCkgKiAxNiB8IDAsIHYgPSBjID09PSAneCcgPyByIDogKHIgJiAweDMgfCAweDgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBpZiAoIShsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVycykpIHtcclxuICAgICAgICAgICAgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnMgPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCEoaGFuZGxlcnMgPSBsaXN0ZW5lcnNbdHlwZV0pKSB7XHJcbiAgICAgICAgICAgIGhhbmRsZXJzID0gbGlzdGVuZXJzW3R5cGVdID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNjb3BlID0gKHNjb3BlID8gc2NvcGUgOiB3aW5kb3cpO1xyXG4gICAgICAgIHZhciBpZCA9IGdlbmVyYXRlR3VpZCgpO1xyXG4gICAgICAgIGhhbmRsZXJzLnB1c2goe1xyXG4gICAgICAgICAgICBpZDogaWQsXHJcbiAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxyXG4gICAgICAgICAgICBzY29wZTogc2NvcGUsXHJcbiAgICAgICAgICAgIGNvbnRleHQ6IChjb250ZXh0ID8gY29udGV4dCA6IHNjb3BlKVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHNlbGYudW5TdWJzY3JpYmUodHlwZSwgaWQpO1xyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgaGFzU3Vic2NyaWJlcnM6IGZ1bmN0aW9uICh0eXBlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGlzdGVuZXJzICYmIHRoaXMubGlzdGVuZXJzW3R5cGVdICYmIHRoaXMubGlzdGVuZXJzW3R5cGVdLmxlbmd0aCA+IDA7XHJcbiAgICB9LFxyXG4gICAgdW5TdWJzY3JpYmU6IGZ1bmN0aW9uICh0eXBlLCBpZCkge1xyXG4gICAgICAgIHZhciBpID0gdGhpcy5saXN0ZW5lcnNbdHlwZV0ubGVuZ3RoO1xyXG4gICAgICAgIHZhciBoYW5kbGVyID0gbnVsbDtcclxuICAgICAgICB3aGlsZSAoIWhhbmRsZXIgJiYgaS0tKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxpc3RlbmVyc1t0eXBlXVtpXS5pZCA9PT0gaWQpIHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXIgPSB0aGlzLmxpc3RlbmVyc1t0eXBlXVtpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWhhbmRsZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmxpc3RlbmVyc1t0eXBlXS5zcGxpY2UoaSwgMSk7XHJcbiAgICB9LFxyXG4gICAgdHJpZ2dlcjogZnVuY3Rpb24gKHR5cGUsIGRhdGEsIGNvbnRleHQpIHtcclxuICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnMsIGksIG4sIGhhbmRsZXI7XHJcbiAgICAgICAgZGF0YSA9IGRhdGEgaW5zdGFuY2VvZiBBcnJheSA/IGRhdGEgOiBbZGF0YV07XHJcbiAgICAgICAgaWYgKCFsaXN0ZW5lcnMpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICA7XHJcbiAgICAgICAgdmFyIGhhbmRsZXJzID0gbGlzdGVuZXJzW3R5cGVdO1xyXG4gICAgICAgIGlmICghaGFuZGxlcnMpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGkgPSAwLCBuID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGhhbmRsZXIgPSBoYW5kbGVyc1tpXTtcclxuICAgICAgICAgICAgaWYgKCh0eXBlb2YgKGNvbnRleHQpICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQgIT09IGhhbmRsZXIuY29udGV4dCkgfHwgIWhhbmRsZXIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChoYW5kbGVyLm1ldGhvZC5hcHBseShoYW5kbGVyLnNjb3BlLCBkYXRhKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=